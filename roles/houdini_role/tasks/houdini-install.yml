---
# tasks file for roles/houdini-install

- name: houdini_version_item
  debug:
    var: item
  with_items:
  - "{{ houdini_version_item }}"
  - "{{ houdini_install_type }}"

- name: "set permissions and ensure dir exists /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  file:
    path: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
    state: directory
    mode: u=rwX,g=r
    owner: deadlineuser
    group: deadlineuser
  become: true

- name: "copy houdini-scripts to /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  copy:
    src: "{{ role_path }}/houdini-scripts/"
    dest: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
    directory_mode: yes
    owner: deadlineuser
  become: true

- name: "set permissions on /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  file:
    dest: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
    owner: deadlineuser
    group: deadlineuser
    mode: u=rwX,g=r
    recurse: yes
  become: true


- name: "set permissions on /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  file:
    dest: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/menus/"
    owner: deadlineuser
    group: deadlineuser
    mode: u=rwX,g=r
    recurse: yes
  become: true

- set_fact:
    houdini_linux_tar_filename: "{{ houdini_version_item.houdini_linux_tar_filename }}"

- name: "User: {{ansible_user}} Query houdini filename - download_houdini.py - Ensure have accepted the EULA and have current keys in your secrets file retrieved from sidefx.com/services/"
  shell: |
    cd /opt/houdini_install_script/
    . /opt/houdini_install_script/exit_test.sh

    echo "Permissions for /:"
    ls -ld /

    echo "Permissions for /opt:"
    ls -ld /opt

    # Check permissions on the houdini_install_script directory and its contents
    echo "Permissions for /opt/houdini_install_script:"
    ls -ld /opt/houdini_install_script

    echo "Permissions for contents of /opt/houdini_install_script:"
    ls -l /opt/houdini_install_script

    sesi_client_id={{ sesi_client_id }} sesi_client_secret_key={{ sesi_client_secret_key }} python3.11 /opt/houdini_install_script/download_houdini.py --buildtype {{ houdini_version_item.houdini_build }} --majorversion {{ houdini_version_item.houdini_major_version }} ; exit_test
  args:
    executable: /bin/bash
  register: houdini_query_out
  become: false # don't need to be root to query the houdini version, and requests may not be available as root unless installed that way.
  when: houdini_version_item.houdini_auto_version
  # environment:
    # sesi_client_id: "{{ lookup('env','sesi_client_id') }}"
    # sesi_client_secret_key: "{{ lookup('env','sesi_client_secret_key') }}"
    # sesi_client_id: sesi_client_id
    # sesi_client_secret_key: sesi_client_secret_key

- name: Python output
  debug:
    var: item
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version

- name: get filename from output
  set_fact:
    houdini_linux_tar_filename: "{{ item | regex_search(regexp) }}"
  vars:
    regexp: '(houdini.*.tar.*)'
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version and 'File:' in item

- name: get url from output
  set_fact:
    download_url: "{{ item | regex_search(regexp) }}"
  vars:
    regexp: '(https.*)'
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version and 'URL:' in item

- name: get build from output
  set_fact:
    build: "{{ item | regex_search(regexp) }}"
  vars:
    regexp: '({{ houdini_version_item.houdini_major_version }}.*)'
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version and 'Build:' in item

- name: get hash from output
  set_fact:
    hash: "{{ item | regex_replace('^Hash:\ (.*)$', '\\1') }}"
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version and 'Hash:' in item
  no_log: true

- name: Hash for file that will be downloaded from sesi.
  debug:
    var: hash

- name: Houdini filename to install from sidefx website result
  debug:
    var: houdini_linux_tar_filename

- fail:
    msg: 'no valid houdini_linux_tar_filename was defined / found'
  when: '".tar" not in houdini_linux_tar_filename'

- name: "ensure {{ download_to_dir }} exists"
  file:
    path: "{{ download_to_dir }}"
    state: directory
    mode: u=rwX,g=rwX,o=rwX
    owner: deadlineuser
    group: syscontrol
  become: true

- name: 's3-sync pull houdini installer {{ installers_bucket }}'
  import_role:
    name: s3_sync # for some reason (looks like a bug with ansible in packer, the role isn't found in core, so we copy it under houdini roles)
  vars:
    mode: "pull"
    bucket: "{{ installers_bucket }}"
    basedir: "{{ download_to_dir }}"
    filename: "{{ houdini_linux_tar_filename | basename }}"
    sync_user: "{{ variable_user }}"
    aws_executable: "/usr/local/bin/aws"
    # variable_user: "{{ variable_user }}" # bypas since variable user should hopefully be passed through.  self referencing vars in yaml isn't supported.

# Note must handle condition if auto version is false and the file doesn't exist in the s3 bucket.
- name: Download Houdini from SESI website - auto versions
  get_url:
    url: "{{ download_url }}"
    dest: "{{ download_to_dir }}/{{ houdini_linux_tar_filename }}"
    mode: u=rw,g=rw,o=rw
    checksum: "md5:{{hash}}"
  become: true
  when: houdini_version_item.houdini_auto_version and not output.stdout is search("File present in S3 bucket") # If the S3 sync does not occur, download from Side FX.
  vars:
    ansible_python_interpreter: "{{ package_python_interpreter }}"

- name: Creating a file with content
  copy:
    dest: "/tmp/houdini_download_result.txt"
    content: |
      {{ build }}
  delegate_to: localhost

- name: Install Houdini
  shell: |
    cd /opt/houdini_install_script/
    . /opt/houdini_install_script/exit_test.sh
    tar -xvf {{ download_to_dir }}/{{ houdini_linux_tar_filename }} -C {{ download_to_dir }}; exit_test
    sudo {{ download_to_dir }}/{{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}/houdini.install --auto-install --accept-EULA 2021-10-13 --install-houdini --no-license --install-hfs-symlink --make-dir /opt/houdini/{{ build }}; exit_test
  args:
    executable: /bin/bash
  when: houdini_version_item.houdini_auto_version
  register: houdini_install_out
  become: true

- debug:
    msg: "{{ houdini_install_out.stdout }}"
  when: houdini_install_type != "server" and houdini_version_item.houdini_auto_version

- name: NODE/WORKSTATION INSTALL - Permissions on zip file - node/workstation
  file:
    path: "{{ download_to_dir }}/{{ houdini_linux_tar_filename }}"
    mode: u+rw,g+rw,o+rw
    owner: "{{ variable_user }}"
    group: syscontrol
  become: true
  when: houdini_install_type != "server"

- name: NODE/WORKSTATION INSTALL - Install Houdini with python script - specific existing version from s3 bucket
  shell: |
    cd /opt/houdini_install_script/
    . /opt/houdini_install_script/exit_test.sh
    tar -xvf {{ download_to_dir }}/{{ houdini_linux_tar_filename }} -C {{ download_to_dir }}; exit_test
    sudo {{ download_to_dir }}/{{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}/houdini.install --auto-install --accept-EULA 2021-10-13 --install-houdini --no-license --install-hfs-symlink --make-dir /opt/houdini/{{ houdini_version_item.houdini_minor_version }}; exit_test
  args:
    executable: /bin/bash
  register: houdini_install_out
  when: houdini_install_type != "server" and not houdini_version_item.houdini_auto_version

- debug:
    msg: "{{ houdini_install_out.stdout }}"
  when: houdini_install_type != "server" and not houdini_version_item.houdini_auto_version

- name: "NODE/WORKSTATION INSTALL - setup licensing mode will write to /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt"
  shell: |
    cd /opt/hfs{{ houdini_version_item.houdini_major_version }}
    sudo sed -i '/licensingMode = sesinetd/s/^# //g' /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt
    sudo cat /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt
  args:
    executable: /bin/bash
  register: houdini_hserver_out
  become: true
  when: houdini_install_type != "server"


### SERVER INSTALL
- name: SERVER INSTALL - check if hserver file exists
  stat:
    path: /opt/hfs{{ houdini_version_item.houdini_major_version }}/bin/hserver
  register: hserver_check
  become: true
  when: houdini_install_type == "server"

- name: SERVER INSTALL - Stop licensing server if already running / installed.  Please ignore any error if hserver not running.
  shell: |
    pgrep hserver
    if [ $? -eq 0 ]; then
      /opt/hfs{{ houdini_version_item.houdini_major_version }}/bin/hserver -q
    else
      echo "hserver is not running.  No need to kill process"
    fi
  args:
    executable: /bin/bash
  become: true
  when: houdini_install_type == "server" and hserver_check.stat.exists

- name: SERVER INSTALL - Permissions on zip file
  file:
    path: "{{ download_to_dir }}/{{ houdini_linux_tar_filename }}"
    mode: u=rw,g=rw,o=r
    owner: "{{ variable_user }}"
    group: syscontrol
  become: true
  when: houdini_install_type == "server"

- name: SERVER INSTALL - make dir.
  shell: |
    # set -x
    cd {{ download_to_dir }}
    dir={{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}
    echo "$dir"
    sudo mkdir -p "$dir"
    cd "$dir"
  args:
    executable: /bin/bash
  register: houdini_install_out
  become_user: "{{ variable_user }}"
  become: true
  when: houdini_install_type == "server"

- name: SERVER INSTALL - unarchive houdini with correct dir.
  shell: |
    # set -x
    dir={{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}
    cd {{ download_to_dir }}
    sudo tar -xvf {{ houdini_linux_tar_filename }} -C "{{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}" --strip-components 1
  args:
    executable: /bin/bash
  register: houdini_install_out
  become_user: "{{ variable_user }}"
  become: true
  when: houdini_install_type == "server"


- name: SERVER INSTALL - Permissions on installer
  file:
    path: "{{ download_to_dir }}/{{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}/houdini.install"
    mode: u=rX,g=rX,o=r
    owner: "{{ variable_user }}"
    group: syscontrol
  become: true
  when: houdini_install_type == "server"

# sudo ./houdini.install --auto-install --accept-EULA 2021-10-13 --install-houdini --no-license --install-hfs-symlink --make-dir /opt/houdini/18.0.221

- name: SERVER INSTALL - install houdini with correct dir.
  shell: |
    # set -x
    cd {{ download_to_dir }}/{{ houdini_linux_tar_filename | regex_replace('.tar.gz$', '') }}
    ls
    sudo ./houdini.install --accept-EULA 2021-10-13 --install-houdini --install-license --install-hfs-symlink --auto-install
  args:
    executable: /bin/bash
  register: houdini_install_out
  # become_user: "{{ variable_user }}"
  become: true
  when: houdini_install_type == "server"

- debug:
    msg: "{{ houdini_install_out.stdout }}"
  when: houdini_install_type == "server"

- name: SERVER INSTALL - setup licensing mode
  shell: |
    cd /opt/hfs{{ houdini_version_item.houdini_major_version }}
    sudo sed -i '/licensingMode = sesinetd/s/^# //g' /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt
    sudo cat /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt
    /opt/hfs{{ houdini_version_item.houdini_major_version }}/bin/hserver
  args:
    executable: /bin/bash
  become: true
  when: houdini_install_type == "server"
### END SERVER INSTALL

# After install sync houdini download with bucket

- name: "Ensure permissions on the file allow access for upload to s3 for {{ variable_user }} and group syscontrol"
  file:
    path: "{{ download_to_dir }}/{{ houdini_linux_tar_filename }}"
    mode: u+rw,g+rw,o+rw
    owner: "{{ variable_user }}"
    group: syscontrol
  become: true

- name: "aws sts get-caller-identity for {{ variable_user }}"
  shell: |
    . /etc/profile && echo $PATH
    echo "PATH: $PATH"
    {{ aws_executable }} sts get-caller-identity
  args:
    executable: /bin/bash
  become_user: "{{ variable_user }}"
  vars:
    aws_executable: "/usr/local/bin/aws"
  tags:
    - sync_installers

- name: 's3-sync push houdini installer {{ installers_bucket }}'
  import_role:
    name: s3_sync
  vars:
    mode: "push"
    bucket: "{{ installers_bucket }}"
    basedir: "{{ download_to_dir }}"
    filename: "{{ houdini_linux_tar_filename | basename }}"
    sync_user: "{{ variable_user }}"
    aws_executable: "/usr/local/bin/aws"
    # variable_user: "deployuser" # deploy user has access to the default downloads folder.
    # variable_user: "{{ variable_user }}" # bypas since variable user should hopefully be passed through.  self referencing vars in yaml isn't supported.
  tags:
    - sync_installers