### Houdini Deadline Plugin

- hosts: "{{ variable_host | default('firehawkgateway') }}"
  remote_user: "{{ variable_connect_as_user | default('deployuser') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  vars:
    user_deadlineuser_pw: ""
    my_password: "{{ user_deadlineuser_pw }}"
    no_extension: "{{ deadline_linux_installers_tar | splitext | first }}"
    basename: "{{ no_extension.split('/')[-1] }}"
    houdini_install_type: 'node'
    secrets_path: "{{ playbook_dir }}"
    vars_files_locs: [ "/{{ secrets_path }}/overrides/ansible/collections/ansible_collections/firehawkvfx/houdini/vars/main.yml", "{{ playbook_dir }}/vars/main.yml" ] # The first file found will be used, allowing the one in your secrets location to override defaults.
    houdini_major_version_list: "{{ houdini_version_list | map(attribute='houdini_major_version') }}"
  # vars_files:
  #   - /deployuser/ansible/group_vars/all/vars

  tasks:
  - name: aquire vars from secrets path before using defaults
    include_vars: "{{ item }}"
    with_first_found: "{{ vars_files_locs }}"
    tags:
    - always

  - name: setup houdini plugin in deadline repository for each major version.  This identical role use occurs in 2 locations - after deadline install and with install of Houdini
    include_role:
      name: deadlinedb_houdini_plugins
      apply:
        tags:
          - install_deadline_db
    tags:
    - always
    loop: "{{ houdini_major_version_list }}"
    loop_control:
      loop_var: houdini_major_version
    when: houdini_install_type != "server"

  - name: ensure db is still valid.  a corrupted db may fail at this point if entryies have not been modified correctly
    shell: |
      # set -x
      cd /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/
      ./deadline_mongo --sslPEMKeyPassword "{{ deadline_proxy_certificate_password }}" --eval 'printjson(db.getCollectionNames())'
    no_log: true
    become: true
    tags: install_deadline_db